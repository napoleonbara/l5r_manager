// Generated by CoffeeScript 1.6.3
(function() {
  var parse;

  parse = dice_roller_parser.parse;

  describe("Dice Roller Parser in RPN", function() {
    describe('parsing flat dice rolls', function() {
      it('"  3D10   "', function() {
        var t;
        t = parse("  3D10   ");
        return expect(t).toEqual([3, 10, 'POOL_ROLL']);
      });
      return it('"4 D 8"', function() {
        var t;
        t = parse("4 D 8");
        return expect(t).toEqual([4, 8, 'POOL_ROLL']);
      });
    });
    describe('parsing trait rolls', function() {
      return it('"K fire"', function() {
        var t;
        t = parse("K fire");
        return expect(t).toEqual(['fire', 'fire', 'ROLL_AND_KEEP']);
      });
    });
    describe('parsing skill rolls', function() {
      return it('"trait | skill"', function() {
        var t;
        t = parse("trait | skill");
        return expect(t).toEqual(['trait', 'skill', '+', 'trait', 'ROLL_AND_KEEP']);
      });
    });
    describe('parsing explicit rolls', function() {
      it('"4 K 3"', function() {
        var t;
        t = parse("4 K 3");
        return expect(t).toEqual([4, 3, 'ROLL_AND_KEEP']);
      });
      it('"(agility + iaijutsu)Kagility"', function() {
        var t;
        t = parse("(agility + iaijutsu)Kagility");
        return expect(t).toEqual(['(', 'agility', 'iaijutsu', '+', ')', 'agility', 'ROLL_AND_KEEP']);
      });
      it('"(strength * 1.5 + 3)K2"', function() {
        var t;
        t = parse("(strength * 1.5 + 3)K2");
        return expect(t).toEqual(['(', 'strength', 1.5, '*', 3, '+', ')', 2, 'ROLL_AND_KEEP']);
      });
      it('"(floor(strength * 1.5) + 3)K2"', function() {
        var t;
        t = parse("(floor(strength * 1.5) + 3)K2");
        return expect(t).toEqual(['(', 'ARG_LIST_BOTTOM', 'strength', 1.5, '*', 'floor', 'FUNCTION_CALL', 3, '+', ')', 2, 'ROLL_AND_KEEP']);
      });
      return it('"(max(strength, perception))K2"', function() {
        var t;
        t = parse("(max(strength, perception))K2");
        return expect(t).toEqual(['(', 'ARG_LIST_BOTTOM', 'strength', 'perception', 'max', 'FUNCTION_CALL', ')', 2, 'ROLL_AND_KEEP']);
      });
    });
    describe('dice modificator option', function() {
      it('"3K2 ^ 2"', function() {
        var t;
        t = parse("3K2 ^ 2");
        return expect(t).toEqual([3, 2, 'ROLL_AND_KEEP', 2, 'DICE_MODIF']);
      });
      it('"3K2^-2"', function() {
        var t;
        t = parse("3K2^(-2)");
        return expect(t).toEqual([3, 2, 'ROLL_AND_KEEP', '(', -2, ')', 'DICE_MODIF']);
      });
      it('"3K2^earth"', function() {
        var t;
        t = parse("3K2^earth");
        return expect(t).toEqual([3, 2, 'ROLL_AND_KEEP', 'earth', 'DICE_MODIF']);
      });
      return it('"3K2^(honor.rank * 2)"', function() {
        var t;
        t = parse("3K2^(honor rank * 2)");
        return expect(t).toEqual([3, 2, 'ROLL_AND_KEEP', '(', 'honor rank', 2, '*', ')', 'DICE_MODIF']);
      });
    });
    describe('roll modificator option', function() {
      it('"3K2+2"', function() {
        var t;
        t = parse("3K2+2");
        return expect(t).toEqual([3, 2, 'ROLL_AND_KEEP', 2, '+']);
      });
      it('"3K2-2"', function() {
        var t;
        t = parse("3K2-2");
        return expect(t).toEqual([3, 2, 'ROLL_AND_KEEP', 2, '-']);
      });
      return it('"3K2+(earth * 2)"', function() {
        var t;
        t = parse("3K2+(earth * 2)");
        return expect(t).toEqual([3, 2, 'ROLL_AND_KEEP', '(', 'earth', 2, '*', ')', '+']);
      });
    });
    describe('explosion threshold option', function() {
      it('"3K2!9"', function() {
        var t;
        t = parse("3K2!9");
        return expect(t).toEqual([3, 2, 'ROLL_AND_KEEP', 9, 'EXPLOSION_THRESHOLD']);
      });
      return it('"3K2!earth"', function() {
        var t;
        t = parse("3K2!earth");
        return expect(t).toEqual([3, 2, 'ROLL_AND_KEEP', 'earth', 'EXPLOSION_THRESHOLD']);
      });
    });
    describe('no explosion option', function() {
      return it('"!3K2"', function() {
        var t;
        t = parse("!3K2");
        return expect(t).toEqual([3, 2, 'ROLL_AND_KEEP', 'EXPLODE_FLAG']);
      });
    });
    describe('chaining options', function() {
      return it('"3K2!(earth * 2)^2"', function() {
        var t;
        t = parse("3K2!(earth * 2)^2");
        return expect(t).toEqual([3, 2, 'ROLL_AND_KEEP', '(', 'earth', 2, '*', ')', 'EXPLOSION_THRESHOLD', 2, 'DICE_MODIF']);
      });
    });
    return describe('statements', function() {
      describe('definition', function() {
        return it('"initiative = reflexes|insight rank"', function() {
          var t;
          t = parse("initiative = reflexes|insight rank");
          return expect(t).toEqual({
            define: 'initiative',
            as: ['reflexes', 'insight rank', '+', 'reflexes', 'ROLL_AND_KEEP']
          });
        });
      });
      describe('addition', function() {
        return it('"initiative += iaijutsu * 2"', function() {
          var t;
          t = parse("initiative += iaijutsu * 2");
          return expect(t).toEqual({
            add: ['iaijutsu', 2, '*'],
            to: 'initiative'
          });
        });
      });
      return describe('substration', function() {
        return it('"initiative -= wound penalty"', function() {
          var t;
          t = parse("initiative -= wound penalty");
          return expect(t).toEqual({
            subtract: ['wound penalty'],
            from: 'initiative'
          });
        });
      });
    });
  });

}).call(this);
