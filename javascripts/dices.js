// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var evaluate, exploding_d10_roll, fair_d10_roll, get_dice_result, parse, roll_each_die;
    parse = dice_roller_parser.parse;
    evaluate = function(t) {
      var a, b;
      switch (t.type) {
        case 'number':
          return Number(t.value);
        case 'symbol':
          return sheet.full_map()[t.value];
        case 'explicit roll':
          return {
            roll: evaluate(t.roll),
            keep: evaluate(t.keep),
            explode: t.explode
          };
        case 'skill roll':
          a = evaluate(t.trait);
          b = evaluate(t.skill);
          return {
            roll: a + b,
            keep: a,
            explode: t.explode
          };
      }
    };
    get_dice_result = function() {
      var r;
      r = 0;
      $("#dice_result td").each(function() {
        if ($(this).hasClass('keep')) {
          return r += Number($(this).text());
        }
      });
      return $('#dices_sum').text("result: " + r);
    };
    $('#dice_roller input[type=button]').click(function() {
      var dices, i, input, out, roll, row, t, _i, _j, _ref, _ref1;
      input = $("#dice_roller input[type=text]").val();
      out = $("#dice_result");
      if (input.length) {
        t = parse(input);
        roll = evaluate(t);
        dices = roll_each_die(roll).sort(function(a, b) {
          return a < b;
        });
        out.html("<div id='summary'>" + roll.roll + "K" + roll.keep + ":<div>", "<table><tr></tr></table>", "<div id='dices_sum'><div>");
        row = out.find("tr");
        for (i = _i = 0, _ref = roll.roll; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          row.append('<td>' + dices[i] + '</td>');
        }
        row.find('td').click(function() {
          $(this).toggleClass('keep');
          return get_dice_result();
        });
        for (i = _j = 0, _ref1 = roll.keep; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          row.find("td:nth-child(" + (i + 1) + ")").toggleClass('keep');
        }
        return get_dice_result();
      }
    });
    roll_each_die = function(roll) {
      var i, roll_method, _i, _ref, _results;
      roll_method = roll.explode ? exploding_d10_roll : fair_d10_roll;
      _results = [];
      for (i = _i = 0, _ref = roll.roll; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(roll_method());
      }
      return _results;
    };
    exploding_d10_roll = function(threshold) {
      var r, re_roll, result;
      if (threshold == null) {
        threshold = 10;
      }
      re_roll = true;
      result = 0;
      while (re_roll) {
        r = fair_d10_roll();
        result += r;
        re_roll = r >= threshold;
      }
      return result;
    };
    return fair_d10_roll = function() {
      return Math.floor(Math.random() * 10) + 1;
    };
  });

}).call(this);

/*
//@ sourceMappingURL=dices.map
*/
