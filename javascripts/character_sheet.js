// Generated by CoffeeScript 1.6.3
(function() {
  var CharacterSheet, Expression, MAPPING, RESERVED_SYMBOLS, Roll, SKILLS, add, div, mul, parse, sub,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  SKILLS = {
    acting: {
      5: 2,
      10: 5
    },
    artisan: {
      5: 2,
      10: 5
    },
    calligraphy: {
      5: 2,
      10: 5
    },
    courtier: {
      5: 2,
      10: 5
    },
    divination: {
      5: 2,
      10: 5
    },
    etiquette: {
      5: 2,
      10: 5
    },
    games: {
      5: 4,
      10: 7
    },
    instruction: {
      5: 4,
      10: 7
    },
    investigation: {
      5: 2,
      10: 5
    },
    lore: {
      5: 4,
      10: 7
    },
    medicine: {
      5: 2,
      10: 5
    },
    meditation: {
      5: 2,
      7: 2,
      10: 5
    },
    performance: {
      5: 4,
      10: 7
    },
    spellcraft: {
      5: 2,
      10: 5
    },
    storytelling: {
      5: 4,
      10: 7
    },
    tea_ceremony: {
      5: 2,
      10: 5
    },
    theology: {
      5: 4,
      7: 2,
      10: 15
    },
    animal_handling: {
      5: 2,
      10: 5
    },
    commerce: {
      5: 2,
      10: 5
    },
    craft: {
      5: 4,
      10: 7
    },
    engineering: {
      5: 2,
      10: 5
    },
    locksmith: {
      5: 2,
      10: 5
    },
    athletics: {
      5: 2,
      10: 5
    },
    battle: {
      5: 2,
      10: 5
    },
    chain_weapons: {
      5: 2,
      10: 5
    },
    heavy_weapons: {
      5: 2,
      10: 5
    },
    kenjutsu: {
      5: 2,
      10: 5
    },
    knives: {
      5: 2,
      10: 5
    },
    kyujutsu: {
      5: 2,
      10: 5
    },
    ninja_weapons: {
      5: 2,
      10: 5
    },
    peasant_weapons: {
      5: 2,
      10: 5
    },
    polearms: {
      5: 2,
      10: 5
    },
    spears: {
      5: 2,
      10: 5
    },
    staves: {
      5: 2,
      10: 5
    },
    war_fans: {
      5: 2,
      10: 5
    },
    defense: {
      5: 2,
      10: 5
    },
    horsemanship: {
      5: 2,
      10: 5
    },
    hunting: {
      5: 2,
      10: 5
    },
    iaijutsu: {
      5: 2,
      10: 5
    },
    jiujutsu: {
      5: 2,
      10: 5
    },
    know_the_school: {
      5: 2,
      10: 5
    },
    anatomy: {
      5: 2,
      10: 5
    },
    deceit: {
      5: 2,
      10: 5
    },
    explosives: {
      5: 2,
      10: 5
    },
    forgery: {
      5: 2,
      10: 5
    },
    poison: {
      5: 2,
      10: 5
    },
    sleight_of_hand: {
      5: 2,
      10: 5
    },
    stealth: {
      5: 2,
      10: 5
    },
    traps: {
      5: 2,
      10: 5
    },
    underworld: {
      5: 2,
      10: 5
    }
  };

  Object.merge = function() {
    var objs, r;
    objs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    r = {};
    Object.merge_with.apply(Object, [r].concat(__slice.call(objs)));
    return r;
  };

  Object.merge_with = function() {
    var n, obj, objs, target, v, _i, _len, _results;
    target = arguments[0], objs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _results = [];
    for (_i = 0, _len = objs.length; _i < _len; _i++) {
      obj = objs[_i];
      _results.push((function() {
        var _results1;
        _results1 = [];
        for (n in obj) {
          v = obj[n];
          _results1.push(target[n] = v);
        }
        return _results1;
      })());
    }
    return _results;
  };

  Object.keep_only = function() {
    var keys, o;
    o = arguments[0], keys = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return Object.keep_if(o, function(k, v) {
      return __indexOf.call(keys, k) >= 0;
    });
  };

  Object.keep_if = function(o, predicate) {
    var key, r, value;
    r = {};
    for (key in o) {
      value = o[key];
      if (predicate(key, value)) {
        r[key] = o[key];
      }
    }
    return r;
  };

  Array.equal = function(a, b) {
    var i, _i, _ref;
    switch (false) {
      case a !== b:
        return true;
      case !(b == null):
        return false;
      case a.length === b.length:
        return false;
      default:
        for (i = _i = 0, _ref = a.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (a[i] !== b[i]) {
            return false;
          }
        }
        return true;
    }
  };

  Array.include = function(a, o) {
    return a.indexOf(o) !== -1;
  };

  Array.popn = function(a, n) {
    var i, _i, _results;
    _results = [];
    for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
      _results.push(a.pop());
    }
    return _results;
  };

  String.trim = function(s) {
    return s.replace(/^\s+|\s+$/g, '');
  };

  String.snake_case = function(s) {
    return s.toLowerCase().replace(/[\s':]/g, '_').replace(/_+/g, '_');
  };

  String.small_case = function(s) {
    return String.snake_case(s).replace(/_/g, ' ');
  };

  $(function() {
    var exploding_d10_roll, fair_d10_roll, get_dice_result, put_number_result, roll_basic, roll_each_die, roll_l5r;
    get_dice_result = function(roll_modificator) {
      var r;
      r = roll_modificator;
      $("#dice_result td").each(function() {
        if ($(this).hasClass('keep')) {
          return r += Number($(this).text());
        }
      });
      return $('#dices_sum').text("result: " + r);
    };
    $('#dice_roller input[type=button]').click(function() {
      var err, handle_query, input, message, out, result;
      input = $("#dice_roller input[type=text]").val();
      out = $("#dice_result");
      handle_query = window.sheet != null ? function(q) {
        return window.sheet.handle_query(q);
      } : window.handle_query;
      if (input.length) {
        try {
          result = handle_query(input);
          switch (false) {
            case typeof result !== 'number':
              return put_number_result(input, result);
            case result.mode !== 'L5R':
              return roll_l5r(input, result);
            case result.mode !== 'basic':
              return roll_basic(input, result);
          }
        } catch (_error) {
          err = _error;
          message = (function() {
            switch (false) {
              case err.name !== "SyntaxError":
                return "Don't know how to roll \"" + input + "\"";
              default:
                return err;
            }
          })();
          return out.html("<div id='summary' style='color: red; font-weight: bold;'>" + message + "</div>");
        }
      }
    });
    put_number_result = function(input, result) {
      var out;
      out = $("#dice_result");
      return out.html("<div id='summary'>" + input + " = " + result + "<div>");
    };
    roll_basic = function(input, result) {
      var dice, i, out, roll_num, row, _i, _results;
      out = $("#dice_result");
      dice = roll_each_die(result);
      roll_num = dice.length;
      out.html("<div id='summary'>" + roll_num + "D10:<div>              <table><tr></tr></table>              <div id='dices_sum'><div>");
      row = out.find("tr");
      _results = [];
      for (i = _i = 0; 0 <= roll_num ? _i < roll_num : _i > roll_num; i = 0 <= roll_num ? ++_i : --_i) {
        _results.push(row.append('<td>' + dice[i] + '</td>'));
      }
      return _results;
    };
    roll_l5r = function(input, result) {
      var dice, i, keep_num, out, roll_num, row, _i, _j;
      out = $("#dice_result");
      dice = roll_each_die(result);
      roll_num = dice.length;
      keep_num = result.keep['10'];
      out.html("<div id='summary'>" + roll_num + "K" + keep_num + ":<div>              <table><tr></tr></table>              <div id='dices_sum'><div>");
      row = out.find("tr");
      for (i = _i = 0; 0 <= roll_num ? _i < roll_num : _i > roll_num; i = 0 <= roll_num ? ++_i : --_i) {
        row.append('<td>' + dice[i] + '</td>');
        row.find('td').click(function() {
          $(this).toggleClass('keep');
          return get_dice_result(result.roll_modif);
        });
      }
      for (i = _j = 0; 0 <= keep_num ? _j < keep_num : _j > keep_num; i = 0 <= keep_num ? ++_j : --_j) {
        row.find("td:nth-child(" + (i + 1) + ")").toggleClass('keep');
      }
      return get_dice_result(result.roll_modif);
    };
    roll_each_die = function(roll) {
      var dices, i, roll_method, roll_num;
      roll_num = roll.roll['10'];
      roll_method = roll.explode ? exploding_d10_roll : fair_d10_roll;
      dices = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; 0 <= roll_num ? _i < roll_num : _i > roll_num; i = 0 <= roll_num ? ++_i : --_i) {
          _results.push(roll_method(roll.explosion_threshold));
        }
        return _results;
      })();
      return dices.map(function(d) {
        return d + roll.dice_modif;
      });
    };
    exploding_d10_roll = function(threshold) {
      var r, re_roll, result;
      if (threshold == null) {
        threshold = 10;
      }
      re_roll = true;
      result = 0;
      while (re_roll) {
        r = fair_d10_roll();
        result += r;
        re_roll = r >= threshold;
      }
      return result;
    };
    return fair_d10_roll = function() {
      return Math.floor(Math.random() * 10) + 1;
    };
  });

  MAPPING = {
    stamina: {
      where: '#general + div .table:nth-of-type(2) .row0 .col1',
      type: 'int'
    },
    willpower: {
      where: '#general + div .table:nth-of-type(2) .row0 .col3',
      type: 'int'
    },
    strength: {
      where: '#general + div .table:nth-of-type(2) .row1 .col1',
      type: 'int'
    },
    perception: {
      where: '#general + div .table:nth-of-type(2) .row1 .col3',
      type: 'int'
    },
    agility: {
      where: '#general + div .table:nth-of-type(2) .row2 .col1',
      type: 'int'
    },
    intelligence: {
      where: '#general + div .table:nth-of-type(2) .row2 .col3',
      type: 'int'
    },
    reflexes: {
      where: '#general + div .table:nth-of-type(2) .row3 .col1',
      type: 'int'
    },
    awareness: {
      where: '#general + div .table:nth-of-type(2) .row3 .col3',
      type: 'int'
    },
    "void": {
      where: '#general + div .table:nth-of-type(2) .row4 .col1',
      type: 'int'
    },
    status: {
      where: '#general + div .table:nth-of-type(3) .row0 .col1',
      type: 'rank'
    },
    glory: {
      where: '#general + div .table:nth-of-type(3) .row0 .col3',
      type: 'rank'
    },
    honor: {
      where: '#general + div .table:nth-of-type(3) .row0 .col5',
      type: 'rank'
    },
    taint: {
      where: '#general + div .table:nth-of-type(3) .row0 .col7',
      type: 'rank'
    },
    skills: {
      where: '#skills + div .table:nth-of-type(1) tr:gt(0)',
      type: 'skills_array'
    },
    earth: {
      where: '#general + div .table:nth-of-type(2) .row0 .col5',
      type: 'int',
      compute: 'min(willpower, stamina)'
    },
    water: {
      where: '#general + div .table:nth-of-type(2) .row1 .col5',
      type: 'int',
      compute: 'min(perception, strength)'
    },
    fire: {
      where: '#general + div .table:nth-of-type(2) .row2 .col5',
      type: 'int',
      compute: 'min(intelligence, agility)'
    },
    air: {
      where: '#general + div .table:nth-of-type(2) .row3 .col5',
      type: 'int',
      compute: 'min(awareness, reflexes)'
    },
    insight: {
      where: '#general + div .table:nth-of-type(1) .row1 .col1',
      type: 'special'
    },
    'insight rank': {
      where: '#general + div .table:nth-of-type(1) .row1 .col3',
      type: 'special'
    },
    'wound level normal': {
      where: "#wounds + div .table:nth-of-type(1) .row1 .col1,            #wounds + div .table:nth-of-type(1) .row2 .col1,            #wounds + div .table:nth-of-type(1) .row3 .col1,            #wounds + div .table:nth-of-type(1) .row4 .col1,            #wounds + div .table:nth-of-type(1) .row5 .col1,            #wounds + div .table:nth-of-type(1) .row6 .col1,            #wounds + div .table:nth-of-type(1) .row7 .col1",
      type: 'int',
      compute: 'earth * 2'
    },
    'wound level out': {
      where: '#wounds + div .table:nth-of-type(1) .row8 .col1',
      type: 'int',
      compute: 'earth * 5'
    },
    'tn to be hit': {
      type: 'int',
      compute: 'reflexes * 5'
    },
    initiative: {
      type: 'roll',
      compute: 'reflexes|insight rank'
    }
  };

  CharacterSheet = (function() {
    function CharacterSheet(mapping) {
      var attr_name, is_computable, points, primary_attributes, properties, rank, sheet_mapping, value, _ref, _ref1;
      this.mapping = mapping;
      is_computable = function(v) {
        return v.compute != null;
      };
      primary_attributes = Object.keep_if(this.mapping, function(k, v) {
        return !is_computable(v);
      });
      _ref = this.mapping;
      for (attr_name in _ref) {
        properties = _ref[attr_name];
        properties.where = $(properties.where);
      }
      for (attr_name in primary_attributes) {
        properties = primary_attributes[attr_name];
        switch (properties.type) {
          case 'rank':
            value = properties.where.text();
            _ref1 = value.split('.').map(Number), rank = _ref1[0], points = _ref1[1];
            this.mapping["" + attr_name + " rank"] = {
              value: rank
            };
            this.mapping["" + attr_name + " points"] = {
              value: points
            };
            delete this.mapping[attr_name];
            break;
          case 'int':
            properties.value = Number(properties.where.text());
        }
      }
      sheet_mapping = this.mapping;
      this.mapping.skills.where.each(function(i, elem) {
        var var_name;
        var_name = String.trim(String.small_case($(elem).find('.col0').text()));
        return sheet_mapping[var_name] = {
          pretty_name: String.trim($(elem).find('.col0').text()),
          category: String.snake_case(String.trim($(elem).find('.col0 a').text())),
          emphases: String.trim($(elem).find('.col1').text()),
          value: Number($(elem).find('.col2').text())
        };
      });
      delete this.mapping.skills;
    }

    CharacterSheet.prototype.complete = function() {
      var context, trait, val, _i, _len, _ref;
      context = this.evaluation_context();
      _ref = ["earth", "fire", "water", "air", "wound level normal", "wound level out", "tn to be hit", "insight", "insight rank", "initiative"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        trait = _ref[_i];
        val = (function() {
          switch (trait) {
            case 'insight':
              return this.compute_insight();
            case 'insight rank':
              return this.compute_insight_rank();
            default:
              return window.handle_query(context, this.mapping[trait].compute);
          }
        }).call(this);
        this.mapping[trait].value = context[trait] = val;
        if (this.mapping[trait].where != null) {
          this.mapping[trait].where.text(val);
        }
      }
      sheet.apply_rules();
      sheet.put_notes();
      return $("#skills + div .table:nth-of-type(1) tr:gt(0)").each(function(i, e) {
        var $row;
        $row = $(e);
        if (Number($(e).find('.col2').text()) === 0) {
          return $row.hide();
        }
      });
    };

    CharacterSheet.prototype.evaluation_context = function() {
      var attr_name, context, properties, _ref;
      if (this.context == null) {
        this.context = context = {};
        _ref = this.mapping;
        for (attr_name in _ref) {
          properties = _ref[attr_name];
          if (properties.value != null) {
            context[attr_name] = properties.value;
          }
        }
        this.context = Object.merge(context, {
          floor: function(args) {
            return Math.floor(args[0]);
          },
          max: function(args) {
            return Math.max.apply(null, args);
          },
          min: function(args) {
            return Math.min.apply(null, args);
          },
          ceil: function(args) {
            return Math.ceil(args[0]);
          },
          'void point': this.handle_query('1K1')
        });
      }
      return this.context;
    };

    CharacterSheet.prototype.compute_insight_rank = function() {
      return Math.max(1, Math.floor((this.mapping.insight.value - 150) / 25) + 2);
    };

    CharacterSheet.prototype.compute_insight = function() {
      var from_mastery, from_rings, from_skills, insight_bonus_level, mapping, name, skill, _i, _len, _ref, _ref1;
      mapping = this.mapping;
      from_rings = ["earth", "fire", "water", "air", "void"].reduce((function(r, e) {
        return r + mapping[e].value;
      }), 0) * 10;
      from_skills = 0;
      from_mastery = 0;
      _ref = Object.keep_if(this.mapping, function(k, v) {
        return v.emphases != null;
      });
      for (name in _ref) {
        skill = _ref[name];
        from_skills += skill.value;
        _ref1 = SKILLS[skill.category];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          insight_bonus_level = _ref1[_i];
          if (skill.rank >= insight_bonus_level) {
            from_mastery += SKILLS[skill.category][insight_bonus_level];
          }
        }
      }
      return from_rings + from_skills + from_mastery;
    };

    CharacterSheet.prototype.handle_rule = function(rule) {
      return window.handle_rule(this.evaluation_context(), rule);
    };

    CharacterSheet.prototype.handle_query = function(exp) {
      return window.handle_query(this.evaluation_context(), exp);
    };

    CharacterSheet.prototype.apply_rules = function() {
      var i, id, ids, rule, rules, _i, _len;
      i = 0;
      ids = (function() {
        var _results;
        _results = [];
        while ((id = "#rules" + (i > 0 ? i : ''), i++, $(id).length > 0)) {
          _results.push(id);
        }
        return _results;
      })();
      rules = $(ids.join(', ')).next().find('li').map(function() {
        return String.trim($(this).text());
      }).toArray();
      for (_i = 0, _len = rules.length; _i < _len; _i++) {
        rule = rules[_i];
        this.handle_rule(rule);
        $('#fast_reference + div ul').append("<li>" + rule + "</li>");
      }
      $(ids.join(', ')).hide();
      return $(ids.join(', ')).next().hide();
    };

    CharacterSheet.prototype.put_notes = function() {
      var i, id, ids, note, notes, _i, _len;
      i = 0;
      ids = (function() {
        var _results;
        _results = [];
        while ((id = "#notes" + (i > 0 ? i : ''), i++, $(id).length > 0)) {
          _results.push(id);
        }
        return _results;
      })();
      notes = $(ids.join(', ')).next().find('li').map(function() {
        return String.trim($(this).text());
      }).toArray();
      for (_i = 0, _len = notes.length; _i < _len; _i++) {
        note = notes[_i];
        $('#fast_reference + div ul').append("<li>" + note + "</li>");
      }
      $(ids.join(', ')).hide();
      return $(ids.join(', ')).next().hide();
    };

    return CharacterSheet;

  })();

  $(function() {
    var sheet;
    window.sheet = sheet = new CharacterSheet(MAPPING);
    sheet.complete();
    return $('#dice_roller input[type=button]').click(function() {
      var expression, result;
      expression = $('#dice_roller input[type=text]').val();
      return result = sheet.handle_query(expression);
    });
  });

  RESERVED_SYMBOLS = "+ - * / ( ) FUNCTION_CALL POOL_ROLL ROLL_AND_KEEP EXPLOSION_THRESHOLD DICE_MODIF".split(' ');

  parse = dice_roller_parser.parse;

  window.handle_rule = function(ctx, rule) {
    rule = parse(rule);
    switch (false) {
      case !rule.hasOwnProperty('define'):
        return ctx[rule.define] = (new Expression(rule.as)).evaluate(ctx);
      case !rule.hasOwnProperty('add'):
        return ctx[rule.to] = (new Expression([rule.to].concat(rule.add, '+'))).evaluate(ctx);
      case !rule.hasOwnProperty('subtract'):
        return ctx[rule.from] = (new Expression([rule.from].concat(rule.subtract, '-'))).evaluate(ctx);
    }
  };

  window.handle_query = function(ctx, expression) {
    expression = new Expression(expression);
    return expression.evaluate(ctx);
  };

  Expression = (function() {
    function Expression(origin) {
      this.origin = origin;
      switch (false) {
        case typeof this.origin !== 'string':
          this.rpn = parse(this.origin);
          break;
        case !(this.origin instanceof Array):
          this.rpn = this.origin;
      }
    }

    Expression.prototype.to_string = function() {
      return this.scan({
        add: function(copy, stack, top, args) {
          return copy.push("" + args[1] + " + " + args[0]);
        },
        sub: function(copy, stack, top, args) {
          return copy.push("" + args[1] + " - " + args[0]);
        },
        mul: function(copy, stack, top, args) {
          return copy.push("" + args[1] + " * " + args[0]);
        },
        div: function(copy, stack, top, args) {
          return copy.push("" + args[1] + " / " + args[0]);
        },
        function_call: function(copy, stack, top, args) {
          var func, i;
          func = stack.pop();
          i = stack.lastIndexOf('ARG_LIST_BOTTOM');
          args = stack.splice(i);
          args.shift();
          return copy.push("" + func + "(" + (args.join(', ')) + ")");
        },
        arg_list_bottom: function(copy, stack, top, args) {
          return stack.push(top);
        },
        pool_roll: function(copy, stack, top, args) {
          return copy.push("" + args[1] + "D" + args[0]);
        },
        roll_and_keep: function(copy, stack, top, args) {
          return copy.push("" + args[1] + "K" + args[0]);
        },
        open_parenthese: function(copy, stack, top, args) {
          return stack.push(top);
        },
        close_parenthese: function(copy, stack, top, args) {
          var i, rest;
          i = stack.lastIndexOf('(');
          rest = stack.splice(i);
          return stack.push(rest.join('') + ')');
        },
        symbol: function(copy, stack, top, args) {
          return stack.push(top);
        },
        number: function(copy, stack, top, args) {
          return stack.push("" + top);
        },
        dont_know: function(copy, stack, top, args) {
          throw "WTF is " + top + "? ";
        },
        dice_modif: function(copy, stack, top, args) {
          return copy.push("" + args[1] + " ^ " + args[0]);
        },
        explosion_threshold: function(copy, stack, top, args) {
          return copy.push("" + args[1] + " ! " + args[0]);
        },
        explode_flag: function(copy, stack, top, args) {
          return copy.push("!" + args[0] + "}");
        }
      });
    };

    Expression.prototype.append = function(exp) {
      return this.rpn = this.rpn.concat(exp.rpn);
    };

    Expression.prototype.dependencies = function() {
      return this.rpn.filter(function(e) {
        return typeof e === 'string' && !Array.include(RESERVED_SYMBOLS, e);
      });
    };

    Expression.prototype.required_computations = function(ctx) {
      return this.dependencies().filter(function(e) {
        return !ctx.hasOwnProperty(e);
      });
    };

    Expression.prototype.scan = function(fs) {
      var copy, stack, top;
      copy = this.rpn.slice().reverse();
      stack = [];
      while (true) {
        top = copy.pop();
        switch (false) {
          case top !== '+':
            fs.add(copy, stack, top, Array.popn(stack, 2));
            break;
          case top !== '-':
            fs.sub(copy, stack, top, Array.popn(stack, 2));
            break;
          case top !== '*':
            fs.mul(copy, stack, top, Array.popn(stack, 2));
            break;
          case top !== '/':
            fs.div(copy, stack, top, Array.popn(stack, 2));
            break;
          case top !== 'FUNCTION_CALL':
            fs.function_call(copy, stack, top, []);
            break;
          case top !== 'POOL_ROLL':
            fs.pool_roll(copy, stack, top, Array.popn(stack, 2));
            break;
          case top !== 'ROLL_AND_KEEP':
            fs.roll_and_keep(copy, stack, top, Array.popn(stack, 2));
            break;
          case top !== 'ARG_LIST_BOTTOM':
            fs.arg_list_bottom(copy, stack, top, []);
            break;
          case top !== '(':
            fs.open_parenthese(copy, stack, top, []);
            break;
          case top !== ')':
            fs.close_parenthese(copy, stack, top, []);
            break;
          case top !== 'EXPLOSION_THRESHOLD':
            fs.explosion_threshold(copy, stack, top, Array.popn(stack, 2));
            break;
          case top !== 'EXPLODE_FLAG':
            fs.explode_flag(copy, stack, top, Array.popn(stack, 1));
            break;
          case top !== 'DICE_MODIF':
            fs.dice_modif(copy, stack, top, Array.popn(stack, 2));
            break;
          case !(top instanceof Roll):
            fs.roll(copy, stack, top, []);
            break;
          case typeof top !== 'number':
            fs.number(copy, stack, top, []);
            break;
          case typeof top !== 'string':
            fs.symbol(copy, stack, top, []);
            break;
          default:
            fs.dont_know(copy, stack, top, []);
        }
        if (copy.length === 0 && stack.length === 1) {
          break;
        }
      }
      return stack[0];
    };

    Expression.prototype.evaluate = function(ctx) {
      return this.scan({
        add: function(copy, stack, top, args) {
          return stack.push(add(args[1], args[0]));
        },
        sub: function(copy, stack, top, args) {
          return stack.push(sub(args[1], args[0]));
        },
        mul: function(copy, stack, top, args) {
          return stack.push(mul(args[1], args[0]));
        },
        div: function(copy, stack, top, args) {
          return stack.push(div(args[1], args[0]));
        },
        function_call: function(copy, stack, top, args) {
          var func, i;
          func = stack.pop();
          i = stack.lastIndexOf('ARG_LIST_BOTTOM');
          args = stack.splice(i);
          args.shift();
          return stack.push(func.call(null, args));
        },
        arg_list_bottom: function(copy, stack, top, args) {
          return stack.push(top);
        },
        pool_roll: function(copy, stack, top, args) {
          var keep, roll;
          roll = {};
          roll[args[0]] = args[1];
          keep = {};
          keep[args[0]] = args[1];
          return stack.push(new Roll({
            roll: roll,
            keep: keep,
            mode: 'basic'
          }));
        },
        roll_and_keep: function(copy, stack, top, args) {
          return stack.push(new Roll({
            roll: {
              10: args[1]
            },
            keep: {
              10: args[0]
            },
            mode: 'L5R',
            explosion_threshold: 10,
            explode: true
          }));
        },
        open_parenthese: function(copy, stack, top, args) {},
        close_parenthese: function(copy, stack, top, args) {},
        symbol: function(copy, stack, top, args) {
          var v;
          v = ctx[top];
          if (v == null) {
            throw "don't know the symbol " + top;
          }
          return stack.push(v);
        },
        number: function(copy, stack, top, args) {
          return stack.push(top);
        },
        roll: function(copy, stack, top, args) {
          return stack.push(top);
        },
        dont_know: function(copy, stack, top, args) {
          throw "WTF is " + top + " ?";
        },
        dice_modif: function(copy, stack, top, args) {
          args[1].dice_modif += args[0];
          return stack.push(args[1]);
        },
        explosion_threshold: function(copy, stack, top, args) {
          args[1].explosion_threshold = Math.min(args[1].explosion_threshold, args[0]);
          return stack.push(args[1]);
        },
        explode_flag: function(copy, stack, top, args) {
          args[0].explode = !args[0].explode;
          return stack.push(args[0]);
        }
      });
    };

    return Expression;

  })();

  window.Expression = Expression;

  Roll = (function() {
    function Roll(opts) {
      Object.merge_with(this, {
        mode: 'basic',
        roll: {
          6: 1
        },
        keep: {
          6: 1
        },
        sum: false,
        dice_modif: 0,
        roll_modif: 0,
        explode: false,
        explosion_threshold: 6
      }, opts);
    }

    Roll.prototype.add_roll = function(other) {
      Object.merge_with(this, {
        roll: Roll.merge_dice_pools(this.roll, other.roll),
        keep: Roll.merge_dice_pools(this.keep, other.keep),
        sum: this.sum || other.sum,
        dice_modif: this.dice_modif + other.dice_modif,
        roll_modif: this.roll_modif + other.roll_modif,
        explode: this.explode || other.explode,
        explosion_threshold: Math.min(this.explosion_threshold, other.explosion_threshold)
      });
      return this;
    };

    Roll.prototype.add_number = function(num) {
      this.sum = true;
      this.roll_modif += num;
      return this;
    };

    Roll.prototype.sub_number = function(num) {
      this.sum = true;
      this.roll_modif -= num;
      return this;
    };

    Roll.prototype.sub_roll = function(other) {
      Object.merge_with(this, {
        roll: Roll.subtract_dice_pools(this.roll, other.roll),
        keep: Roll.subtract_dice_pools(this.keep, other.keep),
        sum: this.sum || other.sum,
        dice_modif: this.dice_modif - other.dice_modif,
        roll_modif: this.roll_modif - other.roll_modif,
        explode: this.explode || other.explode,
        explosion_threshold: Math.min(this.explosion_threshold, other.explosion_threshold)
      });
      return this;
    };

    return Roll;

  })();

  Roll.merge_dice_pools = function(pool_1, pool_2) {
    var num, r, type;
    r = Object.merge({}, pool_1);
    for (type in pool_2) {
      num = pool_2[type];
      if (r[type] == null) {
        r[type] = 0;
      }
      r[type] += num;
    }
    return r;
  };

  Roll.subtract_dice_pools = function(pool_1, pool_2) {
    var num, r, type;
    r = Object.merge({}, pool_1);
    for (type in pool_2) {
      num = pool_2[type];
      if (r[type] != null) {
        r[type] = Math.max(1, r[type] - num);
      }
    }
    return r;
  };

  window.Roll = Roll;

  add = function(lop, rop) {
    var types;
    types = [typeof lop, typeof rop];
    switch (false) {
      case !Array.equal(types, ['number', 'number']):
        return lop + rop;
      case !Array.equal(types, ['object', 'number']):
        return lop.add_number(rop);
      case !Array.equal(types, ['object', 'object']):
        return lop.add_roll(rop);
      default:
        return void 0;
    }
  };

  mul = function(lop, rop) {
    var types;
    types = [typeof lop, typeof rop];
    switch (false) {
      case !Array.equal(types, ['number', 'number']):
        return lop * rop;
      default:
        return void 0;
    }
  };

  div = function(lop, rop) {
    var types;
    types = [typeof lop, typeof rop];
    switch (false) {
      case !Array.equal(types, ['number', 'number']):
        return lop / rop;
      default:
        return void 0;
    }
  };

  sub = function(lop, rop) {
    var types;
    types = [typeof lop, typeof rop];
    switch (false) {
      case !Array.equal(types, ['number', 'number']):
        return lop - rop;
      case !Array.equal(types, ['object', 'number']):
        return lop.sub_number(rop);
      case !Array.equal(types, ['object', 'object']):
        return lop.sub_roll(rop);
      default:
        return void 0;
    }
  };

}).call(this);

/*
//@ sourceMappingURL=character_sheet.map
*/
